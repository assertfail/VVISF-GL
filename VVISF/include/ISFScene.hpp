#ifndef ISFScene_hpp
#define ISFScene_hpp

#include "VVISF_Base.hpp"
#if defined(VVGL_SDK_MAC)
#import <TargetConditionals.h>
#endif




namespace VVISF
{


using namespace std;




//! Subclass of GLScene- the primary interface for rendering and interacting with an ISF file.
/*!
\ingroup VVISF_BASIC
Notes on use:
- You should strive to work with ISFSceneRef whenever possible.
- You should avoid calling setVertexShaderString() or setFragmentShaderString() directly on instances of ISFScene- instead, let the class populate its own shaders.
*/
class VVISF_EXPORT ISFScene : public GLScene	{
	private:
		bool			throwExceptions = false;	//	NO by default

		mutex			propertyLock;	//	locks the below two vars
		//bool			loadingInProgress = false;
		ISFDocRef		doc = nullptr;	//	the ISFDoc being used

		//	access to these vars should be restricted by the 'renderLock' var inherited from GLScene
		VVGL::Size		renderSize = orthoSize;	//	the last size at which i was requested to render a buffer (used to produce vals from normalized point inputs that need a render size to be used)
		Timestamper		timestamper;	//	used to generate time values, some of which get passed to the ISF scene
		uint32_t		renderFrameIndex = 0;	//	used to pass FRAMEINDEX to shaders
		double			renderTime = 0.;	//	this is the render time that gets passed to the ISF
		double			renderTimeDelta = 0.;	//	this is the render time delta (frame duration) which gets passed to the ISF
		uint32_t		passIndex = 1;	//	used to store the index of the rendered pass, which gets passed to the shader
		string			*compiledInputTypeString = nullptr;	//	a sequence of characters, either "2" or "R" or "C", one character for each input image. describes whether the shader was compiled to work with 2D textures or RECT textures or cube textures.

		//	access to these vars should be restricted by the 'renderLock' var inherited from GLScene
		GLCachedAttrib	vertexAttrib = GLCachedAttrib("VERTEXDATA");	//	caches the location of the attribute in the compiled GL program for the vertex input
		GLCachedUni		renderSizeUni = GLCachedUni("RENDERSIZE");	//	caches the location of the uniform in the compiled GL program for the render size
		GLCachedUni		passIndexUni = GLCachedUni("PASSINDEX");	//	caches the location of the uniform in the compiled GL program for the pass index
		GLCachedUni		timeUni = GLCachedUni("TIME");	//	caches the location of the uniform in the compiled GL program for the time
		GLCachedUni		timeDeltaUni = GLCachedUni("TIMEDELTA");	//	caches the location of the uniform in the compiled GL program for the time delta
		GLCachedUni		dateUni = GLCachedUni("DATE");	//	caches the location of the uniform in the compiled GL program for the date
		GLCachedUni		renderFrameIndexUni = GLCachedUni("FRAMEINDEX");	//	caches the location of the uniform in the compiled GL program for the frame index

		//	access to these vars should be restricted by the 'renderLock' var inherited from GLScene
		//GLBufferRef		geoXYVBO = nullptr;
#if !defined(VVGL_TARGETENV_GLES)
		GLBufferRef		vao = nullptr;
#endif
		GLBufferRef		vbo = nullptr;
		Quad<VertXY>		vboContents;	//	the VBO owned by VAO is described by this var- we check this, and if there's a delta then we have to upload new data to the VBO

		//	these vars describe some non-default/non-standard options for more unusual situations
		bool				alwaysRenderToFloat = false;	//	false by default- if true, all interim buffers generated by the ISF will be float32 per component.  set this before loading the doc.
		bool				persistentToIOSurface = false;	//	false by default- if true, persistent buffers generated by the ISF will be backed by IOSurfaces (so they can be re-used if the underlying GL context changes to one in a different sharegroup).  set this before loading the doc.
		GLBufferPoolRef		privatePool = nullptr;	//	by default this is null and the scene will try to use the global buffer pool to create interim resources (temp/persistent buffers).  if non-null, the scene will use this pool to create interim resources.
		GLTexToTexCopierRef	privateCopier = nullptr;	//	by default this is null and the scene will try to use the global buffer copier to create interim resources.  if non-null, the scene will use this copier to create interim resources.

	public:
		//!	Creates a new OpenGL context that shares the global buffer pool's context
		ISFScene();
		//!	Creates a new ISFScene instance, but not a new OpenGL context- instead it uses the passed GLContext.
		ISFScene(const GLContextRef & inCtx);
		virtual ~ISFScene();

		virtual void prepareToBeDeleted();
		
		
		/*!
		\name Loading ISF files
		*/
		///@{
		
		//!	Unloads whatever ISF file is currently loaded.
		void useFile();
		//!	Loads the ISF file at the passed path.
		void useFile(const string & inPath);
		//!	Starts using the ISF file represented by the passed ISFDoc.
		void useDoc(ISFDocRef & inDoc);
		//!	Returns the ISFDoc currently being used by the scene.  Interacting with this doc by setting the value of its inputs will directly affect rendering.
		inline ISFDocRef getDoc() { lock_guard<mutex> lock(propertyLock); return doc; }
		
		///@}
		
		
		/*!
		\name Uncommon setter/getters
		*/
		///@{
		
		//!	Sets the receiver's alwaysRenderToFloat flag- if true, all frames will be rendered using high-bit-depth textures (usually 32 bits per channel/128 bits per pixel).  Default is false.
		void setAlwaysRenderToFloat(const bool & n) { alwaysRenderToFloat=n; }
		//!	Gets the receiver's alwaysRenderToFloat flag.
		bool getAlwaysRenderToFloat() { return alwaysRenderToFloat; }
		//!	Sets the receiver's persistentToIOSurface flag- if true, all passes that are flagged as persistent will render to IOSurface-backed GL textures (a mac-specific optimization that means the textures can be shared with other processes).  Defaults to false.
		void setPersistentToIOSurface(const bool & n) { persistentToIOSurface=n; }
		//!	Gets the receiver's persistentToIOSurface flag.
		bool getPersistentToIOSurface() { return persistentToIOSurface; }
		//!	Sets the receiver's private buffer pool (which should default to null).  If non-null, this buffer pool will be used to generate any GL resources required by this scene.  Handy if you have a variety of GL contexts that aren't shared and you have to switch between them rapidly on a per-frame basis.
		void setPrivatePool(const GLBufferPoolRef & n) { privatePool=n; }
		//!	Gets the receiver's private buffer pool- null by default, only non-null if something called setPrivatePool().
		GLBufferPoolRef getPrivatePool() { return privatePool; }
		//!	Sets the receiver's private buffer copier (which should default to null).  If non-null, this copier will be used to copy any resources that need to be copied- like setPrivatePool(), handy if you have a variety of GL contexts that aren't shared and you have to switch between them rapidly on a per-frame basis.
		void setPrivateCopier(const GLTexToTexCopierRef & n) { privateCopier=n; }
		//!	Gets the receiver's private buffer copier- null by default, only non-null if something called setPrivateCopier().
		GLTexToTexCopierRef getPrivateCopier() { return privateCopier; }
		
		///@}
		
		
		/*!
		\name Setting/getting images and values from INPUTS and PASSES
		*/
		///@{
		
		//!	Locates the attribute/INPUT with the passed name, and sets its current value to the passed GLBuffer.
		void setBufferForInputNamed(const GLBufferRef & inBuffer, const string & inName);
		//!	Assumes that the receiver has loaded a filter-type ISF file- locates the attribute/INPUT that corresponds to the image filter input, and sets its current value to the passed GLBuffer.
		void setFilterInputBuffer(const GLBufferRef & inBuffer);
		//!	Locates the image-type input with the passed name, and sets its current value to the passed GLBuffer.
		void setBufferForInputImageKey(const GLBufferRef & inBuffer, const string & inString);
		//!	Locates the audio-type or audioFFT-type input with the passed name, and sets its current value to the passed GLBuffer.
		void setBufferForAudioInputKey(const GLBufferRef & inBuffer, const string & inString);
		//!	Locates the image-type input matching the passed string, and gets its current value (a GLBufferRef, or null).
		GLBufferRef getBufferForImageInput(const string & inKey);
		//!	Locates the audio-type input matching the passed string, and gets its current value (a GLBufferRef, or null).
		GLBufferRef getBufferForAudioInput(const string & inKey);
		//!	Locates the render pass flagged to render to a persistent buffer with a name that matches the passed string, and gets its current value (a GLBufferRef, or null).
		GLBufferRef getPersistentBufferNamed(const string & inKey);
		//!	Locates the render pass not flagged to render to a persistent buffer with a name that matches the passed string, and gets its current value (a GLBufferRef, or null).
		GLBufferRef getTempBufferNamed(const string & inKey);
		
		//!	Locates the attribute/INPUT with the passed name, and sets its current value to the passed ISFVal.  Can be used to set the value of inputs that use images to express their values, but there are dedicated functions which are easier to work with because they don't wrap the GLBufferRef up inside an ISFVal.
		void setValueForInputNamed(const ISFVal & inVal, const string & inName);
		//!	Locates the attribute/INPUT with the passed name, and gets its current value (an ISFVal).  Attributes whose values are expressed as images vend ISFVal instances which in turn vend GLBufferRef instances.
		ISFVal valueForInputNamed(const string & inName);
		
		///@}
		
		
		/*!
		\name Rendering to GLBuffer
		*/
		///@{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Woverloaded-virtual"
		//virtual GLBufferRef createAndRenderABuffer(const VVGL::Size & inSize=VVGL::Size(640.,480.), const GLBufferPoolRef & inPool=GetGlobalBufferPool());
		/*!
		\brief Creates a buffer of the appropriate type (defaults to 8 bits per channel unless the ISF explicitly requires a floating point texture) and renders into it.
		\param inSize The size of the frame you want to render.
		\param outPassDict Either null or a ptr to a valid map instance of the appropriate type- the output of each render pass is stored in this map.
		\param inPoolRef The buffer pool to use to create GL resources for this frame (defaults to the global buffer pool).
		*/
		virtual GLBufferRef createAndRenderABuffer(const VVGL::Size & inSize=VVGL::Size(640.,480.), map<int32_t,GLBufferRef> * outPassDict=nullptr, const GLBufferPoolRef & inPoolRef=GetGlobalBufferPool());
		//virtual GLBufferRef createAndRenderABuffer(const VVGL::Size & inSize, const double & inRenderTime, const GLBufferPoolRef & inPoolRef=GetGlobalBufferPool());
		/*!
		\brief Creates a buffer of the appropriate type (defaults to 8 bits per channel unless the ISF explicitly requires a floating point texture) and renders into it.
		\param inSize The size of the frame you want to render.
		\param inRenderTime The explicit time to use when rendering the frame.
		\param outPassDict Either null or a ptr to a valid map instance of the appropriate type- the output of each render pass is stored in this map.
		\param inPoolRef The buffer pool to use to create GL resources for this frame (defaults to the global buffer pool).
		*/
		virtual GLBufferRef createAndRenderABuffer(const VVGL::Size & inSize, const double & inRenderTime, map<int32_t,GLBufferRef> * outPassDict=nullptr, const GLBufferPoolRef & inPoolRef=GetGlobalBufferPool());
#pragma clang diagnostic pop
		///@}
		
		
		void renderToBuffer(const GLBufferRef & inTargetBuffer, const VVGL::Size & inRenderSize, const double & inRenderTime, map<int32_t,GLBufferRef> * outPassDict);
		void renderToBuffer(const GLBufferRef & inTargetBuffer, const VVGL::Size & inRenderSize, const double & inRenderTime);
		void renderToBuffer(const GLBufferRef & inTargetBuffer, const VVGL::Size & inRenderSize, map<int32_t,GLBufferRef> * outPassDict);
		void renderToBuffer(const GLBufferRef & inTargetBuffer, const VVGL::Size & inRenderSize);
		void renderToBuffer(const GLBufferRef & inTargetBuffer);

		virtual void setSize(const VVGL::Size & n);
		VVGL::Size getSize() const { return orthoSize; }
		VVGL::Size getRenderSize() const { return renderSize; }
		//!	Creates a a new Timestamp using the scene's built-in Timestamper instance.  This is how the render time is calculated.
		inline Timestamp getTimestamp() { return timestamper.nowTime(); }
		//!	Sets the "throwExceptions" member var, which is false by default.  If true, the ISFScene will throw an exception using the ISFErr object to describe the nature and type of the problem.  Exceptions may be thrown if the file is missing, if there's a problem reading it or parsing the JSON, if there's a problem compiling the GLSL source code for the shaders, etc.
		inline void setThrowExceptions(const bool & n) { throwExceptions=n; }

		//virtual void renderToBuffer(const GLBufferRef & inTargetBuffer, const VVGL::Size & inRenderSize=VVGL::Size(640.,480.), const double & inRenderTime=timestamper.nowTime().getTimeInSeconds(), map<string,GLBufferRef> * outPassDict=nullptr);
		
		
		/*!
		\name Getting attributes/INPUTS
		*/
		///!{
		
		//!	Locates and returns the attribute/INPUT matching the passed name.
		ISFAttrRef getInputNamed(const string & inName);
		//!	Returns a vector of ISFAttrRef instances describing all of the attribute/INPUTS.
		vector<ISFAttrRef> getInputs();
		//!	Returns a vector of ISFAttrRef instances that match the bassed ISFValType.
		vector<ISFAttrRef> getInputsOfType(const ISFValType & inType);
		//!	Returns a vector of all the image-type INPUTS, represented as ISFAttr instances.
		vector<ISFAttrRef> getImageInputs();
		//!	Returns a vector of all the audio- and audioFFT-type INPUTS, represented as ISFAttr instances.
		vector<ISFAttrRef> getAudioInputs();
		//!	Returns a vector of all the image-type IMPORTED, represented as ISFAttr instances.
		vector<ISFAttrRef> getImageImports();
		
		///@}
		
		
		//!	You probably shouldn't call this method directly on this subclass.
		virtual void setVertexShaderString(const string & n);
		//!	You probably shouldn't call this method directly on this subclass.
		virtual void setFragmentShaderString(const string & n);

	protected:
#if !defined(VVGL_TARGETENV_GLES)
		inline GLBufferRef getVAO() const { return vao; }
		inline void setVAO(const GLBufferRef & n) { vao = n; }
#endif
		inline GLBufferRef getVBO() const { return vbo; }
		inline void setVBO(const GLBufferRef & n) { vbo = n; }
		void _setUpRenderCallback();
		virtual void _renderPrep();
		virtual void _initialize();
		virtual void _renderCleanup();
		virtual void _render(const GLBufferRef & inTargetBuffer, const VVGL::Size & inSize, const double & inTime, map<int32_t,GLBufferRef> * outPassDict);

};




/*!
\relatedalso ISFScene
\brief Creates and returns an ISFScene.  The scene makes a new GL context which shares the context of the global buffer pool.
*/
inline ISFSceneRef CreateISFSceneRef() { return make_shared<ISFScene>(); }
/*!
\relatedalso ISFScene
\brief Creates and returns an ISFScene.  The scene uses the passed GL context to do its drawing.
*/
inline ISFSceneRef CreateISFSceneRefUsing(const GLContextRef & inCtx) { return make_shared<ISFScene>(inCtx); }




}




#endif /* ISFScene_hpp */
